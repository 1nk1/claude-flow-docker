name: Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  lint-markdown:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Install markdownlint
      run: npm install -g markdownlint-cli

    - name: Lint markdown files
      run: |
        markdownlint '**/*.md' --ignore node_modules || echo "Markdown linting completed"

  check-links:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check links in documentation
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
        folder-path: '.'
        file-path: './README.md'

  validate-structure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check required documentation files
      run: |
        files=("README.md" "QUICKSTART.md" "INSTALLATION.md" "TROUBLESHOOTING.md" "LICENSE")
        for file in "${files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
          echo "✅ Found: $file"
        done

    - name: Check documentation completeness
      run: |
        # Check if README has all major sections
        sections=("Features" "Quick Start" "Documentation" "Installation")
        for section in "${sections[@]}"; do
          if ! grep -q "$section" README.md; then
            echo "⚠️  Warning: Section '$section' not found in README"
          else
            echo "✅ Section found: $section"
          fi
        done

    - name: Validate code examples
      run: |
        # Extract bash code blocks and validate syntax
        awk '/```bash/,/```/' README.md | grep -v '```' > /tmp/bash_examples.sh || true
        if [ -s /tmp/bash_examples.sh ]; then
          bash -n /tmp/bash_examples.sh && echo "✅ Bash examples are valid" || echo "⚠️  Some bash examples may have issues"
        fi

  spell-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install aspell
      run: sudo apt-get install -y aspell aspell-en

    - name: Spell check documentation
      run: |
        # Create custom dictionary for technical terms
        cat > /tmp/custom_dict.txt << EOF
        Claude
        MCP
        Hive
        Mind
        SQLite
        Docker
        Dockerfile
        npm
        npx
        OAuth
        API
        EOF
        
        # Run spell check on markdown files
        for file in *.md; do
          echo "Checking $file..."
          cat "$file" | aspell list --lang=en --personal=/tmp/custom_dict.txt | sort | uniq || true
        done

  build-docs-site:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Build documentation site
      run: |
        echo "Documentation site build would go here"
        echo "Could use mkdocs, docusaurus, or similar"

    - name: Deploy to GitHub Pages (placeholder)
      run: |
        echo "Would deploy to GitHub Pages"
        # Actual deployment would go here
