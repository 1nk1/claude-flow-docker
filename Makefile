# Makefile –¥–ª—è Claude-Flow Docker
# –£–ø—Ä–æ—â–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏

.PHONY: help setup start stop restart logs shell exec status clean backup restore test

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
BLUE := \033[0;34m
GREEN := \033[0;32m
YELLOW := \033[0;33m
RED := \033[0;31m
NC := \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
	@echo "$(BLUE)üêù Claude-Flow Docker Commands$(NC)"
	@echo "================================"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

setup: ## –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(BLUE)üîß Setting up Claude-Flow Docker...$(NC)"
	@chmod +x *.sh docker-entrypoint.sh
	@./setup.sh

start: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	@echo "$(BLUE)üöÄ Starting Claude-Flow...$(NC)"
	@./cf-start.sh

stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	@echo "$(YELLOW)üõë Stopping Claude-Flow...$(NC)"
	@./cf-stop.sh

restart: stop start ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	@echo "$(GREEN)‚ôªÔ∏è  Claude-Flow restarted$(NC)"

logs: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
	@./cf-logs.sh

shell: ## –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
	@./cf-shell.sh

exec: ## –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ (make exec CMD="claude-flow --help")
	@./cf-exec.sh $(CMD)

status: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ hive-mind
	@echo "$(BLUE)üìä Container Status:$(NC)"
	@docker-compose ps
	@echo ""
	@echo "$(BLUE)üêù Hive-Mind Status:$(NC)"
	@./cf-exec.sh claude-flow hive-mind status || echo "No active hive-mind sessions"
	@echo ""
	@echo "$(BLUE)üíæ Memory Status:$(NC)"
	@./cf-exec.sh claude-flow memory stats || echo "No memory data"

clean: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@echo "$(RED)üßπ Cleaning up containers...$(NC)"
	@docker-compose down
	@echo "$(GREEN)‚úÖ Cleanup complete$(NC)"

clean-all: ## –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ volumes (–£–î–ê–õ–ò–¢ –í–°–ï –î–ê–ù–ù–´–ï!)
	@echo "$(RED)‚ö†Ô∏è  WARNING: This will delete all Claude-Flow data!$(NC)"
	@read -p "Are you sure? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		docker-compose down -v; \
		echo "$(GREEN)‚úÖ All data removed$(NC)"; \
	else \
		echo "$(YELLOW)Cancelled$(NC)"; \
	fi

backup: ## –°–æ–∑–¥–∞—Ç—å backup volumes
	@echo "$(BLUE)üíæ Creating backup...$(NC)"
	@mkdir -p backups
	@docker run --rm \
		-v claude-flow-swarm:/data \
		-v $$(pwd)/backups:/backup \
		alpine tar czf /backup/swarm-$$(date +%Y%m%d-%H%M%S).tar.gz /data
	@docker run --rm \
		-v claude-flow-hive:/data \
		-v $$(pwd)/backups:/backup \
		alpine tar czf /backup/hive-$$(date +%Y%m%d-%H%M%S).tar.gz /data
	@echo "$(GREEN)‚úÖ Backup created in ./backups/$(NC)"

restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ backup (make restore BACKUP=file.tar.gz)
	@if [ -z "$(BACKUP)" ]; then \
		echo "$(RED)‚ùå Please specify backup file: make restore BACKUP=file.tar.gz$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üì• Restoring from $(BACKUP)...$(NC)"
	@docker run --rm \
		-v claude-flow-swarm:/data \
		-v $$(pwd)/backups:/backup \
		alpine tar xzf /backup/$(BACKUP) -C /
	@echo "$(GREEN)‚úÖ Restore complete$(NC)"

test: ## –¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
	@echo "$(BLUE)üß™ Testing Claude-Flow...$(NC)"
	@./cf-exec.sh claude-flow --version
	@./cf-exec.sh node --version
	@./cf-exec.sh npm --version
	@echo "$(GREEN)‚úÖ All tests passed$(NC)"

build: ## Rebuild Docker –æ–±—Ä–∞–∑–∞
	@echo "$(BLUE)üèóÔ∏è  Building Docker image...$(NC)"
	@docker-compose build --no-cache
	@echo "$(GREEN)‚úÖ Build complete$(NC)"

init-project: ## –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Claude-Flow –≤ –ø—Ä–æ–µ–∫—Ç–µ
	@echo "$(BLUE)üì¶ Initializing Claude-Flow in project...$(NC)"
	@./cf-exec.sh claude-flow init --force
	@echo "$(GREEN)‚úÖ Project initialized$(NC)"

hive-spawn: ## –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π hive-mind (make hive-spawn TASK="build API")
	@if [ -z "$(TASK)" ]; then \
		echo "$(RED)‚ùå Please specify task: make hive-spawn TASK=\"your task\"$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üêù Spawning hive-mind for: $(TASK)$(NC)"
	@./cf-exec.sh claude-flow hive-mind spawn "$(TASK)" --claude

swarm: ## –ë—ã—Å—Ç—Ä–∞—è swarm –∫–æ–º–∞–Ω–¥–∞ (make swarm TASK="build feature")
	@if [ -z "$(TASK)" ]; then \
		echo "$(RED)‚ùå Please specify task: make swarm TASK=\"your task\"$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üåä Running swarm: $(TASK)$(NC)"
	@./cf-exec.sh claude-flow swarm "$(TASK)" --claude

memory-stats: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
	@./cf-exec.sh claude-flow memory stats

memory-query: ## –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ (make memory-query Q="auth")
	@if [ -z "$(Q)" ]; then \
		echo "$(RED)‚ùå Please specify query: make memory-query Q=\"search term\"$(NC)"; \
		exit 1; \
	fi
	@./cf-exec.sh claude-flow memory query "$(Q)"

install-package: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å npm –ø–∞–∫–µ—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (make install-package PKG="lodash")
	@if [ -z "$(PKG)" ]; then \
		echo "$(RED)‚ùå Please specify package: make install-package PKG=\"package-name\"$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üì¶ Installing $(PKG)...$(NC)"
	@./cf-exec.sh npm install $(PKG)
	@echo "$(GREEN)‚úÖ Package installed$(NC)"

# Aliases –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
run: start
down: stop
ps: status
sh: shell
